/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.tguduru.spark.ncdc.model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WeatherStation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6463891618970614957L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WeatherStation\",\"namespace\":\"io.tguduru.spark.ncdc.model\",\"fields\":[{\"name\":\"region\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"state\",\"type\":[\"string\",\"null\"]},{\"name\":\"county\",\"type\":[\"string\",\"null\"]},{\"name\":\"country\",\"type\":[\"string\",\"null\"]},{\"name\":\"extendedName\",\"type\":[\"string\",\"null\"]},{\"name\":\"callSign\",\"type\":[\"string\",\"null\"]},{\"name\":\"stationType\",\"type\":[\"string\",\"null\"]},{\"name\":\"assignedDate\",\"type\":[\"string\",\"null\"]},{\"name\":\"stateDate\",\"type\":[\"string\",\"null\"]},{\"name\":\"comments\",\"type\":[\"string\",\"null\"]},{\"name\":\"geoLocation\",\"type\":[\"string\",\"null\"]},{\"name\":\"otherElevation\",\"type\":[\"string\",\"null\"]},{\"name\":\"groundElevation\",\"type\":[\"string\",\"null\"]},{\"name\":\"runwayElevation\",\"type\":[\"string\",\"null\"]},{\"name\":\"barometricElevation\",\"type\":[\"string\",\"null\"]},{\"name\":\"stationElevation\",\"type\":[\"string\",\"null\"]},{\"name\":\"upperAirElevation\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence region;
  @Deprecated public java.lang.CharSequence code;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence state;
  @Deprecated public java.lang.CharSequence county;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.lang.CharSequence extendedName;
  @Deprecated public java.lang.CharSequence callSign;
  @Deprecated public java.lang.CharSequence stationType;
  @Deprecated public java.lang.CharSequence assignedDate;
  @Deprecated public java.lang.CharSequence stateDate;
  @Deprecated public java.lang.CharSequence comments;
  @Deprecated public java.lang.CharSequence geoLocation;
  @Deprecated public java.lang.CharSequence otherElevation;
  @Deprecated public java.lang.CharSequence groundElevation;
  @Deprecated public java.lang.CharSequence runwayElevation;
  @Deprecated public java.lang.CharSequence barometricElevation;
  @Deprecated public java.lang.CharSequence stationElevation;
  @Deprecated public java.lang.CharSequence upperAirElevation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WeatherStation() {}

  /**
   * All-args constructor.
   * @param region The new value for region
   * @param code The new value for code
   * @param name The new value for name
   * @param state The new value for state
   * @param county The new value for county
   * @param country The new value for country
   * @param extendedName The new value for extendedName
   * @param callSign The new value for callSign
   * @param stationType The new value for stationType
   * @param assignedDate The new value for assignedDate
   * @param stateDate The new value for stateDate
   * @param comments The new value for comments
   * @param geoLocation The new value for geoLocation
   * @param otherElevation The new value for otherElevation
   * @param groundElevation The new value for groundElevation
   * @param runwayElevation The new value for runwayElevation
   * @param barometricElevation The new value for barometricElevation
   * @param stationElevation The new value for stationElevation
   * @param upperAirElevation The new value for upperAirElevation
   */
  public WeatherStation(java.lang.CharSequence region, java.lang.CharSequence code, java.lang.CharSequence name, java.lang.CharSequence state, java.lang.CharSequence county, java.lang.CharSequence country, java.lang.CharSequence extendedName, java.lang.CharSequence callSign, java.lang.CharSequence stationType, java.lang.CharSequence assignedDate, java.lang.CharSequence stateDate, java.lang.CharSequence comments, java.lang.CharSequence geoLocation, java.lang.CharSequence otherElevation, java.lang.CharSequence groundElevation, java.lang.CharSequence runwayElevation, java.lang.CharSequence barometricElevation, java.lang.CharSequence stationElevation, java.lang.CharSequence upperAirElevation) {
    this.region = region;
    this.code = code;
    this.name = name;
    this.state = state;
    this.county = county;
    this.country = country;
    this.extendedName = extendedName;
    this.callSign = callSign;
    this.stationType = stationType;
    this.assignedDate = assignedDate;
    this.stateDate = stateDate;
    this.comments = comments;
    this.geoLocation = geoLocation;
    this.otherElevation = otherElevation;
    this.groundElevation = groundElevation;
    this.runwayElevation = runwayElevation;
    this.barometricElevation = barometricElevation;
    this.stationElevation = stationElevation;
    this.upperAirElevation = upperAirElevation;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return region;
    case 1: return code;
    case 2: return name;
    case 3: return state;
    case 4: return county;
    case 5: return country;
    case 6: return extendedName;
    case 7: return callSign;
    case 8: return stationType;
    case 9: return assignedDate;
    case 10: return stateDate;
    case 11: return comments;
    case 12: return geoLocation;
    case 13: return otherElevation;
    case 14: return groundElevation;
    case 15: return runwayElevation;
    case 16: return barometricElevation;
    case 17: return stationElevation;
    case 18: return upperAirElevation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: region = (java.lang.CharSequence)value$; break;
    case 1: code = (java.lang.CharSequence)value$; break;
    case 2: name = (java.lang.CharSequence)value$; break;
    case 3: state = (java.lang.CharSequence)value$; break;
    case 4: county = (java.lang.CharSequence)value$; break;
    case 5: country = (java.lang.CharSequence)value$; break;
    case 6: extendedName = (java.lang.CharSequence)value$; break;
    case 7: callSign = (java.lang.CharSequence)value$; break;
    case 8: stationType = (java.lang.CharSequence)value$; break;
    case 9: assignedDate = (java.lang.CharSequence)value$; break;
    case 10: stateDate = (java.lang.CharSequence)value$; break;
    case 11: comments = (java.lang.CharSequence)value$; break;
    case 12: geoLocation = (java.lang.CharSequence)value$; break;
    case 13: otherElevation = (java.lang.CharSequence)value$; break;
    case 14: groundElevation = (java.lang.CharSequence)value$; break;
    case 15: runwayElevation = (java.lang.CharSequence)value$; break;
    case 16: barometricElevation = (java.lang.CharSequence)value$; break;
    case 17: stationElevation = (java.lang.CharSequence)value$; break;
    case 18: upperAirElevation = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'region' field.
   * @return The value of the 'region' field.
   */
  public java.lang.CharSequence getRegion() {
    return region;
  }

  /**
   * Sets the value of the 'region' field.
   * @param value the value to set.
   */
  public void setRegion(java.lang.CharSequence value) {
    this.region = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'county' field.
   * @return The value of the 'county' field.
   */
  public java.lang.CharSequence getCounty() {
    return county;
  }

  /**
   * Sets the value of the 'county' field.
   * @param value the value to set.
   */
  public void setCounty(java.lang.CharSequence value) {
    this.county = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'extendedName' field.
   * @return The value of the 'extendedName' field.
   */
  public java.lang.CharSequence getExtendedName() {
    return extendedName;
  }

  /**
   * Sets the value of the 'extendedName' field.
   * @param value the value to set.
   */
  public void setExtendedName(java.lang.CharSequence value) {
    this.extendedName = value;
  }

  /**
   * Gets the value of the 'callSign' field.
   * @return The value of the 'callSign' field.
   */
  public java.lang.CharSequence getCallSign() {
    return callSign;
  }

  /**
   * Sets the value of the 'callSign' field.
   * @param value the value to set.
   */
  public void setCallSign(java.lang.CharSequence value) {
    this.callSign = value;
  }

  /**
   * Gets the value of the 'stationType' field.
   * @return The value of the 'stationType' field.
   */
  public java.lang.CharSequence getStationType() {
    return stationType;
  }

  /**
   * Sets the value of the 'stationType' field.
   * @param value the value to set.
   */
  public void setStationType(java.lang.CharSequence value) {
    this.stationType = value;
  }

  /**
   * Gets the value of the 'assignedDate' field.
   * @return The value of the 'assignedDate' field.
   */
  public java.lang.CharSequence getAssignedDate() {
    return assignedDate;
  }

  /**
   * Sets the value of the 'assignedDate' field.
   * @param value the value to set.
   */
  public void setAssignedDate(java.lang.CharSequence value) {
    this.assignedDate = value;
  }

  /**
   * Gets the value of the 'stateDate' field.
   * @return The value of the 'stateDate' field.
   */
  public java.lang.CharSequence getStateDate() {
    return stateDate;
  }

  /**
   * Sets the value of the 'stateDate' field.
   * @param value the value to set.
   */
  public void setStateDate(java.lang.CharSequence value) {
    this.stateDate = value;
  }

  /**
   * Gets the value of the 'comments' field.
   * @return The value of the 'comments' field.
   */
  public java.lang.CharSequence getComments() {
    return comments;
  }

  /**
   * Sets the value of the 'comments' field.
   * @param value the value to set.
   */
  public void setComments(java.lang.CharSequence value) {
    this.comments = value;
  }

  /**
   * Gets the value of the 'geoLocation' field.
   * @return The value of the 'geoLocation' field.
   */
  public java.lang.CharSequence getGeoLocation() {
    return geoLocation;
  }

  /**
   * Sets the value of the 'geoLocation' field.
   * @param value the value to set.
   */
  public void setGeoLocation(java.lang.CharSequence value) {
    this.geoLocation = value;
  }

  /**
   * Gets the value of the 'otherElevation' field.
   * @return The value of the 'otherElevation' field.
   */
  public java.lang.CharSequence getOtherElevation() {
    return otherElevation;
  }

  /**
   * Sets the value of the 'otherElevation' field.
   * @param value the value to set.
   */
  public void setOtherElevation(java.lang.CharSequence value) {
    this.otherElevation = value;
  }

  /**
   * Gets the value of the 'groundElevation' field.
   * @return The value of the 'groundElevation' field.
   */
  public java.lang.CharSequence getGroundElevation() {
    return groundElevation;
  }

  /**
   * Sets the value of the 'groundElevation' field.
   * @param value the value to set.
   */
  public void setGroundElevation(java.lang.CharSequence value) {
    this.groundElevation = value;
  }

  /**
   * Gets the value of the 'runwayElevation' field.
   * @return The value of the 'runwayElevation' field.
   */
  public java.lang.CharSequence getRunwayElevation() {
    return runwayElevation;
  }

  /**
   * Sets the value of the 'runwayElevation' field.
   * @param value the value to set.
   */
  public void setRunwayElevation(java.lang.CharSequence value) {
    this.runwayElevation = value;
  }

  /**
   * Gets the value of the 'barometricElevation' field.
   * @return The value of the 'barometricElevation' field.
   */
  public java.lang.CharSequence getBarometricElevation() {
    return barometricElevation;
  }

  /**
   * Sets the value of the 'barometricElevation' field.
   * @param value the value to set.
   */
  public void setBarometricElevation(java.lang.CharSequence value) {
    this.barometricElevation = value;
  }

  /**
   * Gets the value of the 'stationElevation' field.
   * @return The value of the 'stationElevation' field.
   */
  public java.lang.CharSequence getStationElevation() {
    return stationElevation;
  }

  /**
   * Sets the value of the 'stationElevation' field.
   * @param value the value to set.
   */
  public void setStationElevation(java.lang.CharSequence value) {
    this.stationElevation = value;
  }

  /**
   * Gets the value of the 'upperAirElevation' field.
   * @return The value of the 'upperAirElevation' field.
   */
  public java.lang.CharSequence getUpperAirElevation() {
    return upperAirElevation;
  }

  /**
   * Sets the value of the 'upperAirElevation' field.
   * @param value the value to set.
   */
  public void setUpperAirElevation(java.lang.CharSequence value) {
    this.upperAirElevation = value;
  }

  /**
   * Creates a new WeatherStation RecordBuilder.
   * @return A new WeatherStation RecordBuilder
   */
  public static io.tguduru.spark.ncdc.model.WeatherStation.Builder newBuilder() {
    return new io.tguduru.spark.ncdc.model.WeatherStation.Builder();
  }

  /**
   * Creates a new WeatherStation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WeatherStation RecordBuilder
   */
  public static io.tguduru.spark.ncdc.model.WeatherStation.Builder newBuilder(io.tguduru.spark.ncdc.model.WeatherStation.Builder other) {
    return new io.tguduru.spark.ncdc.model.WeatherStation.Builder(other);
  }

  /**
   * Creates a new WeatherStation RecordBuilder by copying an existing WeatherStation instance.
   * @param other The existing instance to copy.
   * @return A new WeatherStation RecordBuilder
   */
  public static io.tguduru.spark.ncdc.model.WeatherStation.Builder newBuilder(io.tguduru.spark.ncdc.model.WeatherStation other) {
    return new io.tguduru.spark.ncdc.model.WeatherStation.Builder(other);
  }

  /**
   * RecordBuilder for WeatherStation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WeatherStation>
    implements org.apache.avro.data.RecordBuilder<WeatherStation> {

    private java.lang.CharSequence region;
    private java.lang.CharSequence code;
    private java.lang.CharSequence name;
    private java.lang.CharSequence state;
    private java.lang.CharSequence county;
    private java.lang.CharSequence country;
    private java.lang.CharSequence extendedName;
    private java.lang.CharSequence callSign;
    private java.lang.CharSequence stationType;
    private java.lang.CharSequence assignedDate;
    private java.lang.CharSequence stateDate;
    private java.lang.CharSequence comments;
    private java.lang.CharSequence geoLocation;
    private java.lang.CharSequence otherElevation;
    private java.lang.CharSequence groundElevation;
    private java.lang.CharSequence runwayElevation;
    private java.lang.CharSequence barometricElevation;
    private java.lang.CharSequence stationElevation;
    private java.lang.CharSequence upperAirElevation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.tguduru.spark.ncdc.model.WeatherStation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.region)) {
        this.region = data().deepCopy(fields()[0].schema(), other.region);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.county)) {
        this.county = data().deepCopy(fields()[4].schema(), other.county);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.extendedName)) {
        this.extendedName = data().deepCopy(fields()[6].schema(), other.extendedName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.callSign)) {
        this.callSign = data().deepCopy(fields()[7].schema(), other.callSign);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.stationType)) {
        this.stationType = data().deepCopy(fields()[8].schema(), other.stationType);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.assignedDate)) {
        this.assignedDate = data().deepCopy(fields()[9].schema(), other.assignedDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.stateDate)) {
        this.stateDate = data().deepCopy(fields()[10].schema(), other.stateDate);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.comments)) {
        this.comments = data().deepCopy(fields()[11].schema(), other.comments);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.geoLocation)) {
        this.geoLocation = data().deepCopy(fields()[12].schema(), other.geoLocation);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.otherElevation)) {
        this.otherElevation = data().deepCopy(fields()[13].schema(), other.otherElevation);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.groundElevation)) {
        this.groundElevation = data().deepCopy(fields()[14].schema(), other.groundElevation);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.runwayElevation)) {
        this.runwayElevation = data().deepCopy(fields()[15].schema(), other.runwayElevation);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.barometricElevation)) {
        this.barometricElevation = data().deepCopy(fields()[16].schema(), other.barometricElevation);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.stationElevation)) {
        this.stationElevation = data().deepCopy(fields()[17].schema(), other.stationElevation);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.upperAirElevation)) {
        this.upperAirElevation = data().deepCopy(fields()[18].schema(), other.upperAirElevation);
        fieldSetFlags()[18] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WeatherStation instance
     * @param other The existing instance to copy.
     */
    private Builder(io.tguduru.spark.ncdc.model.WeatherStation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.region)) {
        this.region = data().deepCopy(fields()[0].schema(), other.region);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.county)) {
        this.county = data().deepCopy(fields()[4].schema(), other.county);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.extendedName)) {
        this.extendedName = data().deepCopy(fields()[6].schema(), other.extendedName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.callSign)) {
        this.callSign = data().deepCopy(fields()[7].schema(), other.callSign);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.stationType)) {
        this.stationType = data().deepCopy(fields()[8].schema(), other.stationType);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.assignedDate)) {
        this.assignedDate = data().deepCopy(fields()[9].schema(), other.assignedDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.stateDate)) {
        this.stateDate = data().deepCopy(fields()[10].schema(), other.stateDate);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.comments)) {
        this.comments = data().deepCopy(fields()[11].schema(), other.comments);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.geoLocation)) {
        this.geoLocation = data().deepCopy(fields()[12].schema(), other.geoLocation);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.otherElevation)) {
        this.otherElevation = data().deepCopy(fields()[13].schema(), other.otherElevation);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.groundElevation)) {
        this.groundElevation = data().deepCopy(fields()[14].schema(), other.groundElevation);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.runwayElevation)) {
        this.runwayElevation = data().deepCopy(fields()[15].schema(), other.runwayElevation);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.barometricElevation)) {
        this.barometricElevation = data().deepCopy(fields()[16].schema(), other.barometricElevation);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.stationElevation)) {
        this.stationElevation = data().deepCopy(fields()[17].schema(), other.stationElevation);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.upperAirElevation)) {
        this.upperAirElevation = data().deepCopy(fields()[18].schema(), other.upperAirElevation);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'region' field.
      * @return The value.
      */
    public java.lang.CharSequence getRegion() {
      return region;
    }

    /**
      * Sets the value of the 'region' field.
      * @param value The value of 'region'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setRegion(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.region = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'region' field has been set.
      * @return True if the 'region' field has been set, false otherwise.
      */
    public boolean hasRegion() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'region' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearRegion() {
      region = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.code = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearCode() {
      code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setState(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.state = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearState() {
      state = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'county' field.
      * @return The value.
      */
    public java.lang.CharSequence getCounty() {
      return county;
    }

    /**
      * Sets the value of the 'county' field.
      * @param value The value of 'county'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setCounty(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.county = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'county' field has been set.
      * @return True if the 'county' field has been set, false otherwise.
      */
    public boolean hasCounty() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'county' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearCounty() {
      county = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.country = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearCountry() {
      country = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'extendedName' field.
      * @return The value.
      */
    public java.lang.CharSequence getExtendedName() {
      return extendedName;
    }

    /**
      * Sets the value of the 'extendedName' field.
      * @param value The value of 'extendedName'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setExtendedName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.extendedName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'extendedName' field has been set.
      * @return True if the 'extendedName' field has been set, false otherwise.
      */
    public boolean hasExtendedName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'extendedName' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearExtendedName() {
      extendedName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'callSign' field.
      * @return The value.
      */
    public java.lang.CharSequence getCallSign() {
      return callSign;
    }

    /**
      * Sets the value of the 'callSign' field.
      * @param value The value of 'callSign'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setCallSign(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.callSign = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'callSign' field has been set.
      * @return True if the 'callSign' field has been set, false otherwise.
      */
    public boolean hasCallSign() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'callSign' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearCallSign() {
      callSign = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'stationType' field.
      * @return The value.
      */
    public java.lang.CharSequence getStationType() {
      return stationType;
    }

    /**
      * Sets the value of the 'stationType' field.
      * @param value The value of 'stationType'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setStationType(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.stationType = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'stationType' field has been set.
      * @return True if the 'stationType' field has been set, false otherwise.
      */
    public boolean hasStationType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'stationType' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearStationType() {
      stationType = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'assignedDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getAssignedDate() {
      return assignedDate;
    }

    /**
      * Sets the value of the 'assignedDate' field.
      * @param value The value of 'assignedDate'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setAssignedDate(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.assignedDate = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'assignedDate' field has been set.
      * @return True if the 'assignedDate' field has been set, false otherwise.
      */
    public boolean hasAssignedDate() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'assignedDate' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearAssignedDate() {
      assignedDate = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'stateDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getStateDate() {
      return stateDate;
    }

    /**
      * Sets the value of the 'stateDate' field.
      * @param value The value of 'stateDate'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setStateDate(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.stateDate = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'stateDate' field has been set.
      * @return True if the 'stateDate' field has been set, false otherwise.
      */
    public boolean hasStateDate() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'stateDate' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearStateDate() {
      stateDate = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'comments' field.
      * @return The value.
      */
    public java.lang.CharSequence getComments() {
      return comments;
    }

    /**
      * Sets the value of the 'comments' field.
      * @param value The value of 'comments'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setComments(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.comments = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'comments' field has been set.
      * @return True if the 'comments' field has been set, false otherwise.
      */
    public boolean hasComments() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'comments' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearComments() {
      comments = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'geoLocation' field.
      * @return The value.
      */
    public java.lang.CharSequence getGeoLocation() {
      return geoLocation;
    }

    /**
      * Sets the value of the 'geoLocation' field.
      * @param value The value of 'geoLocation'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setGeoLocation(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.geoLocation = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'geoLocation' field has been set.
      * @return True if the 'geoLocation' field has been set, false otherwise.
      */
    public boolean hasGeoLocation() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'geoLocation' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearGeoLocation() {
      geoLocation = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'otherElevation' field.
      * @return The value.
      */
    public java.lang.CharSequence getOtherElevation() {
      return otherElevation;
    }

    /**
      * Sets the value of the 'otherElevation' field.
      * @param value The value of 'otherElevation'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setOtherElevation(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.otherElevation = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'otherElevation' field has been set.
      * @return True if the 'otherElevation' field has been set, false otherwise.
      */
    public boolean hasOtherElevation() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'otherElevation' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearOtherElevation() {
      otherElevation = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'groundElevation' field.
      * @return The value.
      */
    public java.lang.CharSequence getGroundElevation() {
      return groundElevation;
    }

    /**
      * Sets the value of the 'groundElevation' field.
      * @param value The value of 'groundElevation'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setGroundElevation(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.groundElevation = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'groundElevation' field has been set.
      * @return True if the 'groundElevation' field has been set, false otherwise.
      */
    public boolean hasGroundElevation() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'groundElevation' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearGroundElevation() {
      groundElevation = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'runwayElevation' field.
      * @return The value.
      */
    public java.lang.CharSequence getRunwayElevation() {
      return runwayElevation;
    }

    /**
      * Sets the value of the 'runwayElevation' field.
      * @param value The value of 'runwayElevation'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setRunwayElevation(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.runwayElevation = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'runwayElevation' field has been set.
      * @return True if the 'runwayElevation' field has been set, false otherwise.
      */
    public boolean hasRunwayElevation() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'runwayElevation' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearRunwayElevation() {
      runwayElevation = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'barometricElevation' field.
      * @return The value.
      */
    public java.lang.CharSequence getBarometricElevation() {
      return barometricElevation;
    }

    /**
      * Sets the value of the 'barometricElevation' field.
      * @param value The value of 'barometricElevation'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setBarometricElevation(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.barometricElevation = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'barometricElevation' field has been set.
      * @return True if the 'barometricElevation' field has been set, false otherwise.
      */
    public boolean hasBarometricElevation() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'barometricElevation' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearBarometricElevation() {
      barometricElevation = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'stationElevation' field.
      * @return The value.
      */
    public java.lang.CharSequence getStationElevation() {
      return stationElevation;
    }

    /**
      * Sets the value of the 'stationElevation' field.
      * @param value The value of 'stationElevation'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setStationElevation(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.stationElevation = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'stationElevation' field has been set.
      * @return True if the 'stationElevation' field has been set, false otherwise.
      */
    public boolean hasStationElevation() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'stationElevation' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearStationElevation() {
      stationElevation = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'upperAirElevation' field.
      * @return The value.
      */
    public java.lang.CharSequence getUpperAirElevation() {
      return upperAirElevation;
    }

    /**
      * Sets the value of the 'upperAirElevation' field.
      * @param value The value of 'upperAirElevation'.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder setUpperAirElevation(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.upperAirElevation = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'upperAirElevation' field has been set.
      * @return True if the 'upperAirElevation' field has been set, false otherwise.
      */
    public boolean hasUpperAirElevation() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'upperAirElevation' field.
      * @return This builder.
      */
    public io.tguduru.spark.ncdc.model.WeatherStation.Builder clearUpperAirElevation() {
      upperAirElevation = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    public WeatherStation build() {
      try {
        WeatherStation record = new WeatherStation();
        record.region = fieldSetFlags()[0] ? this.region : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.code = fieldSetFlags()[1] ? this.code : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.state = fieldSetFlags()[3] ? this.state : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.county = fieldSetFlags()[4] ? this.county : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.country = fieldSetFlags()[5] ? this.country : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.extendedName = fieldSetFlags()[6] ? this.extendedName : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.callSign = fieldSetFlags()[7] ? this.callSign : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.stationType = fieldSetFlags()[8] ? this.stationType : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.assignedDate = fieldSetFlags()[9] ? this.assignedDate : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.stateDate = fieldSetFlags()[10] ? this.stateDate : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.comments = fieldSetFlags()[11] ? this.comments : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.geoLocation = fieldSetFlags()[12] ? this.geoLocation : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.otherElevation = fieldSetFlags()[13] ? this.otherElevation : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.groundElevation = fieldSetFlags()[14] ? this.groundElevation : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.runwayElevation = fieldSetFlags()[15] ? this.runwayElevation : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.barometricElevation = fieldSetFlags()[16] ? this.barometricElevation : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.stationElevation = fieldSetFlags()[17] ? this.stationElevation : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.upperAirElevation = fieldSetFlags()[18] ? this.upperAirElevation : (java.lang.CharSequence) defaultValue(fields()[18]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
